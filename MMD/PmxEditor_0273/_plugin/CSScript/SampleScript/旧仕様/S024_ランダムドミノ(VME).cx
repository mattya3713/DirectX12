<?xml version="1.0"?>
<CSScriptData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Core.dll</string>
    <string>System.Data.dll</string>
    <string>System.Data.DataSetExtensions.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Xml.Linq.dll</string>
    <string>Microsoft.CSharp.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.SDX;
using PEPlugin.Pmd;
using PEPlugin.Vmd;
using PEPlugin.Vme;
using PEPlugin.Form;
using PEPlugin.View;
using SlimDX;
using SlimDX.Direct3D9;
using IES = PEPlugin.Vme.IPEVmeEventState;
using IBS = PEPlugin.Vme.IPEVmeBoneState;
using ISS = PEPlugin.Vme.IPEVmeSingleValueState;
using IMS = PEPlugin.Vme.IPEVmeSingleValueState;
using ICS = PEPlugin.Vme.IPEVmeCameraState;
using ILS = PEPlugin.Vme.IPEVmeLightState;
</UsingText>
  <FullCodeText>
// using項目はメニューから一括管理(ここへの直接追記でも動作可能)

// Scriptプラグインクラス(クラス名変更不可)
public class CSScriptClass : PEPluginClass
{
    // コンストラクタ
    public CSScriptClass() : base()
    {
        // 起動オプション
        // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
        m_option = new PEPluginOption(false, true, "CSScript生成プラグイン");
    }

    // エントリポイント
    public override void Run(IPERunArgs args)
    {
        try {
            // ここへ処理を追加してください.
            

        }
        catch (Exception ex) {
            MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }
    }
}
</FullCodeText>
  <CodeText>
// ---- サンプルコード ----
// ランダムドミノ
//

// 標準ヘッダは使わない
IPEPluginHost host = args.Host;
IPEConnector connect = host.Connector;


// 拡張PMDとして作成
IPEXPmd pex = PEStaticBuilder.SC.XPmd();

// 材質のランダム作成
int matCount = 64;
for (int i = 0; i &lt; matCount; i++) {
    IPEXMaterial material = PEStaticBuilder.SC.XMaterial();
    V3 col = V3.Rand(0, 1);
    material.Diffuse = col.ToV4();
    material.Ambient = col;
    material.Edge = true;
    pex.Material.Add(material);
}

// プリミティブ数
int count = 1000;
Random rand = new Random();

// プリミティブ追加
for (int i = 0; i &lt; count; i++) {
    // 対応ボーン
    IPEXBone bone = PEStaticBuilder.SC.XBone();
    bone.Name = i.ToString();
    bone.Kind = BoneKind.RotateMove;
    pex.Bone.Add(bone);

    pex.Primitive.AddBox(rand.Next(0, matCount), new V3(0, 0, 0), 1, 2, 0.4f, bone);
}

// PMD化
IPEPmd pmd = pex.ToPmd();

// VME作成
IPEVme vme = PEStaticBuilder.SC.Vme();
vme.Init(pmd);

Vector3 pos = new Vector3(0, 1, 0);
Vector3 dir = V3.Rand(new Vector3(-1, 0, -1), new Vector3(1, 0, 1));
dir.Normalize();

float d = 1.5f;
Vector3 sum = Vector3.Zero;

// 初期配置の設定
vme.GroupBone.ForEach((IPEVmeBone bone) =&gt;
{
    bone.P.Set(0, pos);
    bone.R.Set(0, Q.Dir(dir));

    pos += dir * d;
    pos.Y += V3.Rand(-1, 1).X;
    sum += pos;

    dir = Vector3.TransformNormal(dir, Matrix.RotationAxis(Vector3.UnitY, Q.D2R(V3.Rand(-30, 30).X)));
    dir.Normalize();
});

// 全景表示のため中心へシフト
sum /= count; sum.Y = 0;
vme.GroupBone.ForEach((IPEVmeBone bone) =&gt;
{
    bone.P.Set(0, -sum, OpType.Add);
});

// 倒れるモーション(簡易形式)
vme.GroupBone.ForEach((int index, IPEVmeBone bone) =&gt;
{
    float dp = index * d;
    int f = (int)(dp / (d * 2));

    bone.T.Set(f, new Vector3(0, -0.5f, 0), OpType.Add);
    bone.R.Set(f, (IES state) =&gt;
    {
        IBS s = state as IBS;
        return Quaternion.RotationAxis(Vector3.UnitX, Q.D2R(-45)) * s.R.PV;
    });

    bone.T.Set(f + 1, new Vector3(0, -0.5f, 0), OpType.Add);
    bone.R.Set(f + 1, (IES state) =&gt;
    {
        IBS s = state as IBS;
        return Quaternion.RotationAxis(Vector3.UnitX, Q.D2R(-45)) * s.R.PV;
    });
});

// プレビュー
vme.Preview(new PEVmePreviewOption(0, 500));
</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPEConnector connect = host.Connector;
IPEPMDViewConnector view = host.Connector.View.PMDView;

// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト


</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMD更新
connect.Pmd.Update(pmd);
//connect.Pmd.UpdateEx(pex);

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>false</EnableHeader>
  <EnableFooter>false</EnableFooter>
  <ActivePages>1</ActivePages>
</CSScriptData>