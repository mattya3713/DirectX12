<?xml version="1.0"?>
<CSScriptData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ScriptType>CS1</ScriptType>
  <CompilerVersion>4</CompilerVersion>
  <ReferenceAssemblies>
    <string>System.dll</string>
    <string>System.Data.dll</string>
    <string>System.Deployment.dll</string>
    <string>System.Drawing.dll</string>
    <string>System.Windows.Forms.dll</string>
    <string>System.Xml.dll</string>
    <string>System.Core.dll</string>
  </ReferenceAssemblies>
  <UsingText>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using PEPlugin;
using PEPlugin.Pmd;
using PEPlugin.Form;
using PEPlugin.View;
</UsingText>
  <FullCodeText>
// using項目はメニューから一括管理(ここへの直接追記でも動作可能)

// Scriptプラグインクラス(クラス名変更不可)
public class CSScriptClass : PEPluginClass
{
    // コンストラクタ
    public CSScriptClass() : base()
    {
        // 起動オプション
        // boot時実行(true/false), プラグインメニューへの登録(true/false), メニュー登録名("")
        m_option = new PEPluginOption(false, true, "CSScript生成プラグイン");
    }

    // エントリポイント
    public override void Run(IPERunArgs args)
    {
        try {
            // ここへ処理を追加してください.
            

        }
        catch (Exception ex) {
            MessageBox.Show(ex.Message, "エラー", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }
    }
}
</FullCodeText>
  <CodeText>
// ---- サンプルコード ----
// 応用 剛体をCSV出力 -サンプル用-
//

// 内容 剛体データをCSV化してファイルに保存(サンプル用なのでこのままではまともに使えません)


// PMD関連
IPEPmd pmd = args.Host.Connector.Pmd.GetCurrentState();     // PMD取得
IList&lt;IPEBody&gt; body = pmd.Body;								// 剛体


// bool配列の文字列化
Func&lt;bool[], string&gt; flagText = (bool[] f) =&gt;
{
	StringBuilder buf = new StringBuilder();
	Array.ForEach&lt;bool&gt;(f, flag =&gt; { buf.Append(flag ? "1" : "0"); });
	return buf.ToString();
};

// 文字列追記用バッファ
StringBuilder sb = new StringBuilder();     

// ヘッダ行追加
sb.AppendLine("剛体名,剛体タイプ,関連ボーン,グループ,非衝突グループ,形状,サイズ1,サイズ2,サイズ3,位置X,位置Y,位置Z,回転X,回転Y,回転Z,質量,移動減衰,回転減衰,反発力,摩擦力");

// 面倒なのでデータ値から一気に文字列化
for (int i = 0; i &lt; body.Count; i++) {

    // CSVの一行文字列 (printf方式)
    string line = string.Format(
        "\"{0}\",{1},{2},{3},'{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19}",
        body[i].Name,
        (int)body[i].Mode,
        body[i].Bone,
        body[i].Group,
        flagText(body[i].PassGroup),
        (int)body[i].BoxKind,
        body[i].BoxSize.X,
        body[i].BoxSize.Y,
        body[i].BoxSize.Z,
        body[i].Position.X,
        body[i].Position.Y,
        body[i].Position.Z,
        body[i].Rotation.X,			// [rad](本来は[deg]に書き換える必要がある)
        body[i].Rotation.Y,			// 同上
        body[i].Rotation.Z,			// 同上
        body[i].Mass,
        body[i].PositionDamping,
        body[i].RotationDamping,
        body[i].Restitution,
        body[i].Friction
    );

    sb.AppendLine(line);    // 行追加
}

// ファイルダイアログ表示
using (SaveFileDialog dlg = new SaveFileDialog()) {
    if (dlg.ShowDialog() == DialogResult.OK) {
		// CSVファイルとして保存
        File.WriteAllText(dlg.FileName, sb.ToString(), Encoding.GetEncoding("shift_jis"));
    }
}



</CodeText>
  <CodeHeader>//
// ---- 簡易編集用ヘッダコード ----

// 常用接続変数一括登録

// ホスト配下
IPEPluginHost host = args.Host;
IPEBuilder builder = host.Builder;
IPEShortBuilder bd = host.Builder.SC;		// 短絡系ビルダ
IPEConnector connect = host.Connector;

// PMD関連

IPEPmd pmd = connect.Pmd.GetCurrentState();         // PMD取得
// IPEXPmd pex = connect.Pmd.GetCurrentStateEx();       // 拡張PMDを使う場合はコメント解除(拡張用データへの接続変数は未登録)

IPEHeader header = pmd.Header;                  // header   :ヘッダ
IList&lt;IPEVertex&gt; vertex = pmd.Vertex;           // vertex   :頂点   | リスト
IList&lt;int&gt; face = pmd.Face;                     // face     :面     | リスト
IList&lt;IPEMaterial&gt; material = pmd.Material;     // material :材質   | リスト
IList&lt;IPEBone&gt; bone = pmd.Bone;                 // bone     :ボーン | リスト
IList&lt;IPEIK&gt; ik = pmd.IK;                       // ik       :IK     | リスト
IList&lt;IPEExpression&gt; exp = pmd.Expression;      // exp      :表情   | リスト

IList&lt;int&gt; frameExp = pmd.FrameExpression;      // frameExp :表情枠 | リスト
IList&lt;IPEFrameBone&gt; frameBone = pmd.FrameBone;  // frameBone:ボーン表示枠 | リスト

string[] toon = pmd.ToonName;                   // toon     :Toon   | 配列

IList&lt;IPEBody&gt; body = pmd.Body;                 // body     :剛体   | リスト
IList&lt;IPEJoint&gt; joint = pmd.Joint;              // joint    :Joint  | リスト


</CodeHeader>
  <CodeFooter>//
// ---- 簡易編集用フッタコード ----

// 更新処理
// デフォルト設定ではフッタコードはOFF

// PMD更新
connect.Pmd.Update(pmd);

// Form更新
connect.Form.UpdateList(UpdateObject.All);  // 重い場合は引数を変更して個別に更新

// PMDView更新
connect.View.PMDView.UpdateModel();         // Viewの更新が不要な場合はコメントアウト
connect.View.PMDView.UpdateView();


</CodeFooter>
  <EnableHeader>false</EnableHeader>
  <EnableFooter>false</EnableFooter>
  <ActivePages>1</ActivePages>
</CSScriptData>